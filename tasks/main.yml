---
# tasks file for aws-vpc
- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ region }}"
    state: present
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    tags:
      code_name: "{{ code_name }}"
      "kubernetes.io/cluster/{{ vpc_name }}": shared      
  register: vpc

- name: associate subnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc.vpc.id }}"
   region: "{{ region }}"
   az: "{{ subnet_az_public }}"
   cidr: "{{ subnet_cidr_public }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   map_public: yes
   tags:
      "kubernetes.io/cluster/{{ vpc_name }}": shared  
      "kubernetes.io/role/elb": 1 
   resource_tags:
     Name: "{{ subnet_name }}_public"
     code_name: "{{ code_name }}"
  register: subnet_1
 
- name: associate subnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc.vpc.id }}"
   region: "{{ region }}"
   az: "{{ subnet_az_private }}"
   cidr: "{{ subnet_cidr_private }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   map_public: yes
   tags:
      "kubernetes.io/cluster/{{ vpc_name }}": shared
      "kubernetes.io/role/internal-elb": 1     
      code_name: "{{ code_name }}" 
   resource_tags:
     Name: "{{ subnet_name }}_private"
  register: subnet_2

- name: create IGW
  ec2_vpc_igw:
   vpc_id: "{{ vpc.vpc.id }}"
   region: "{{ region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   tags:
     Name: "{{ igw_name }}"
     code_name: "{{ code_name }}"
  register: igw  

- name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
  ec2_vpc_nat_gateway:
    state: present
    region: "{{ region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    subnet_id: "{{ subnet_2.subnet.id }}"
    wait: yes
    if_exist_do_not_create: true
  register: new_nat_gateway  

- name: Route IGW
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    subnets:
      - "{{ subnet_1.subnet.id }}"
      - "{{ subnet_2.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id  }}"
    tags:
      Name: "{{ route_name }}"
      code_name: "{{ code_name }}"
  register: rt

- debug:
    var: rt  

- name: remove key pair by name
  ec2_key:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ code_name }}_ec2_keypair"
    region: "{{ region }}"   
    state: absent

- name: create a new ec2 key pair
  ec2_key:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ code_name }}_ec2_keypair"
    region: "{{ region }}"   
  register: keypair

- debug:
    var: keypair
 
- name: Copy EC2 Private Key locally so it can be later on used to SSH into the instance
  copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory }}{{ code_name }}_ec2_keypair.ppk
  when: keypair.changed == true
  become: yes
  register: c

# update the CIDR address in the SSH port section. 
- name: Create Security Group
  ec2_group:
    name: "{{ securitygroup_name }}"
    description: DMZ Security Group
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    rules:
      - proto: tcp
        ports:
        - 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
        - 22
        cidr_ip: 0.0.0.0/0
    tags:
      code_name: "{{ code_name }}"        
  register: security_group  
